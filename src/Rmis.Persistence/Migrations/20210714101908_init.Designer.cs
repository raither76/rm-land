// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rmis.Persistence;

namespace Rmis.Persistance.Migrations
{
    [DbContext(typeof(RmisDbContext))]
    [Migration("20210714101908_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Rmis.Domain.Direction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<long?>("FromStationId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("ToStationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FromStationId");

                    b.HasIndex("ToStationId");

                    b.ToTable("Direction");
                });

            modelBuilder.Entity("Rmis.Domain.Route", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DirectionId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DirectionId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("Rmis.Domain.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("ArrivalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTimeOffset>("DepartureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsSynchronized")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("RouteId")
                        .HasColumnType("bigint");

                    b.Property<string>("TrainDriver")
                        .HasColumnType("text");

                    b.Property<string>("TrainNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Rmis.Domain.Station", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ModifyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("YaCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("Rmis.Domain.Direction", b =>
                {
                    b.HasOne("Rmis.Domain.Station", "FromStation")
                        .WithMany()
                        .HasForeignKey("FromStationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Rmis.Domain.Station", "ToStation")
                        .WithMany()
                        .HasForeignKey("ToStationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FromStation");

                    b.Navigation("ToStation");
                });

            modelBuilder.Entity("Rmis.Domain.Route", b =>
                {
                    b.HasOne("Rmis.Domain.Direction", "Direction")
                        .WithMany()
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Direction");
                });

            modelBuilder.Entity("Rmis.Domain.Schedule", b =>
                {
                    b.HasOne("Rmis.Domain.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Route");
                });
#pragma warning restore 612, 618
        }
    }
}
